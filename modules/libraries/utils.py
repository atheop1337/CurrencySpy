import random, string, aiohttp, logging, asyncio, datetime
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from typing import Union
import yfinance as yf
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy as np


class const:
    DATABASE_NAME = "database/spy.db"

class _Kbs:

    ...

class _States:

    class SetCurrency(StatesGroup):
        currency = State()

    class SetInterval(StatesGroup):
        interval = State()

    class SetThreshold(StatesGroup):
        threshold = State()

class _Messages:

    @staticmethod
    def get_welcome_message(username: str, successfully: Union[bool, int]) -> str:
        if successfully or successfully == 409:
            return(
            f"""
            <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username} –≤ –ë–æ—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç!</b> üìà

            –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –¢–∞–∫–∂–µ –æ–Ω –º–æ–∂–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∏ –¥–µ–ª–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ.

            <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—á–∞–ª–∞:</b>
            - <code>/set_currency</code> ‚Äî –≤—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD, EUR, BTC).
            - <code>/set_interval</code> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (1 —á–∞—Å, 4 —á–∞—Å–∞, 24 —á–∞—Å–∞).
            - <code>/get_rate</code> ‚Äî —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã.
            - <code>/set_threshold</code> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬±5%).
            - <code>/forecast</code> ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.

            üí¨ <i>–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã—à–µ.</i>

            <b>–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!</b> üëá
            –í–≤–µ–¥–∏—Ç–µ <code>/set_currency</code> –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã.
            """
            )
        else: 
            return(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–Ω–µ—Å–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

    @staticmethod
    def get_set_currency_message() -> str:
        return (
            """
            <b>üåê Supported Cryptocurrencies:</b>

            ‚Ä¢ <b>Bitcoin</b> (BTC)
            ‚Ä¢ <b>Ethereum</b> (ETH)
            ‚Ä¢ <b>Ripple</b> (XRP)
            ‚Ä¢ <b>Litecoin</b> (LTC)
            ‚Ä¢ <b>Bitcoin Cash</b> (BCH)
            ‚Ä¢ <b>USD Coin</b> (USDC)
            ‚Ä¢ <b>Tether</b> (USDT)
            ‚Ä¢ <b>Cardano</b> (ADA)
            ‚Ä¢ <b>Polygon</b> (MATIC)
            ‚Ä¢ <b>Solana</b> (SOL)

            <b>üí± Supported Fiat Currencies:</b>

            ‚Ä¢ US Dollar (USD)
            ‚Ä¢ Euro (EUR)
            ‚Ä¢ British Pound (GBP)

            <b> ‚öõ Write me code of currency that you want to track: </b>
            """
        )

    @staticmethod
    def get_rate_message(udata: dict) -> str:
        return(f"""
            <b>–í–∞–ª—é—Ç–∞: {udata["currency"]}</b>
            <b>–¶–µ–Ω–∞: {udata["last_rate"]}$</b>
            <i>–ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–∞–∂–¥—ã–µ {udata["interval"]} —Å–µ–∫—É–Ω–¥</i>
            <i>–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {udata["threshold"]}%</i>
            <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è coinbase</b>
        """)

    @staticmethod
    def get_set_interval_message() -> str:
        return (
            """
            <b>‚öõ Enter notification interval in seconds</b>
            """
        )

    @staticmethod
    def get_set_threshold_message() -> str:
        return (
            """
            <b>‚öõ Enter percentage threshold for currency price changes</b>
            """
        )


class _Methods:

    @staticmethod  
    async def get_currency_price(symbol: str) -> Union[int, None]:
        url = f"https://api.coinbase.com/v2/prices/{symbol}-USD/spot"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    try:
                        price = round(float(data["data"]["amount"]))
                        return int(price)
                    except (KeyError, TypeError, ValueError):
                        logging.error(f"Unexpected data format: {data}")
                        return None
                else:
                    logging.error(f"Failed to fetch price for {symbol}: {response.status}")
                    return None


class CryptoTracker:
    def __init__(self, symbol, interval='1d', days_back=60):
        self.symbol = symbol
        self.interval = interval
        self.days_back = days_back
        self.model = LinearRegression()

    def fetch_data(self):
        end_date = datetime.datetime.now()
        start_date = end_date - datetime.timedelta(days=self.days_back)
        data = yf.download(self.symbol, start=start_date, end=end_date, interval=self.interval)
        return data['Close']

    def train_model(self, data):
        X = np.arange(len(data)).reshape(-1, 1)
        self.model.fit(X, data.values)

    def forecast(self, data, days=7):
        future_X = np.arange(len(data), len(data) + days).reshape(-1, 1)
        return self.model.predict(future_X)

    def plot_and_analyze(self, data, forecast):
        plt.figure(figsize=(10, 5))
        plt.plot(data.index, data.values, label='Historical Price')
        
        forecast_dates = [data.index[-1] + datetime.timedelta(days=i + 1) for i in range(len(forecast))]
        plt.plot(forecast_dates, forecast, label='Forecast', linestyle='--')
        
        plt.title(f'{self.symbol} Price Forecast')
        plt.xlabel('Date')
        plt.ylabel('Price in USD')
        plt.legend()
        plt.grid()
        plt.savefig(f'{self.symbol}-FORECAST-PRICE.png')
        plt.close()
        logging.info(f"Forecast price graph saved as '{self.symbol}-FORECAST-PRICE.png.'")

        trend = "upward" if forecast[-1] > data.values[-1] else "downward"
        forecasted = f"{forecast[0].item():.2f}"
        logging.info(f"Analysis: The forecast indicates an {trend} trend in the next period.")
        logging.info(f"Predicted closing price for the next day: {forecasted} USD")
        return forecasted

    def run_analysis(self):
        data = self.fetch_data()
        self.train_model(data)
        
        forecast = self.forecast(data)
        forecasted = self.plot_and_analyze(data, forecast)
        
        logging.info("Analysis complete.")

        return forecasted



